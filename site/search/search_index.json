{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Infrastructure Demos","text":"<p>Welcome to the documentation of AWS Infrastructure Demos!</p> <p>In this documentation you will find information about the examples hosted in GitHub.</p> <p>The README file in the repository should include enough information to get to know how to execute examples but details about what each example produces is provided in this site.</p>"},{"location":"#resource-pricing","title":"Resource Pricing","text":""},{"location":"#dynamodb-free-tier","title":"DynamoDB free tier","text":"<p>Information from AWS</p> <p>The AWS Free Tier enables you to gain free, hands-on experience with AWS services. The following DynamoDB benefits are included as part of the AWS Free Tier. Each benefit is calculated monthly on a per-Region, per-payer account basis.</p> <ul> <li>25 GB of data storage for tables using the DynamoDB Standard table class</li> <li>2.5 million stream read requests from DynamoDB Streams</li> <li>100 GB of data transfer out to the internet, aggregated across all AWS Services and Regions (except China and GovCloud)</li> </ul>"},{"location":"bash_examples/01_retrieveAMIs/","title":"Example 01: Get Available AMIs","text":"<p>This is a really simple example, it retrieves the AMIs provided by Amazon (or yourself) and stores them in a JSON file.</p>"},{"location":"terraform_examples/01_SetUpS3Backend/","title":"Example 01: Set Up S3 Backend","text":"<p>This is a trivial but fundamental example, when managing cloud infrastructure you may always want to have access to the current state of your build, even if you are working from another machine and even more important if you are working as part of a team.</p> <p>In this example S3 will be used to store the terraform state files, follow up examples will make us of this so make sure of having it done, albeit is listed among terraform examples this is in fact written in bash and the verification is done by initializing terraform with this backend.</p> <p>Imporant note: S3 is a free tier product (for 12 months), on the free tier we will have up to 5Gb of storage free of charge. </p>"},{"location":"terraform_examples/01_SetUpS3Backend/#acknowledgements","title":"Acknowledgements","text":"<p>This example follows the article in Medium written by Francesco Cosentino.</p>"},{"location":"terraform_examples/01_SetUpS3Backend/#example-description","title":"Example description","text":"<p>Basically there are 4 steps into setting up S3 as Terraform backend in AWS: 1. Creating the S3 bucket 2. Encrypt the bucket (This example uses AES256, but KMS and key rotation is recommended) 3. Restrict the access to the bucket:   1. Create an unpriviledged user   2. Give access to S3 and DynamoDB to this user (this example gives full access for simplicity, is recommended to just give less power to this user.) 4. Enforce the policy in the bucket.  5. (Optional-Recommended): Lock the s3 bucket to prevent it to be modified/deleted by other users</p> <p>Policy file format (policy.json): <pre><code>{\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"AWS\": \"&lt;ARN of USER&gt;\"\n},\n\"Action\": \"s3:*\",\n\"Resource\": \"&lt;ARN of bucket&gt;\"\n}\n]\n}\n</code></pre></p> <p>Testing that everything went alright: Write a terraform with the following code in it: <pre><code>terraform {  backend \"s3\" {\nbucket = \"&lt;your-bucket-name&gt;\"\nencrypt        = true\nkey    = \"terraform.tfstate\"    region = \"&lt;your-region&gt;\"  dynamodb_table = \"terraform-state-lock-dynamo\"\n}\n}\nprovider \"aws\" {\nregion = var.region\nshared_credentials_file = var.shared_credentials_file\nprofile = var.aws_profile\nversion = \"~&gt; 3.12.0\"\n}\n</code></pre> Run the following command <pre><code>terraform init\n</code></pre></p> <p>First time running Terraform:</p> <p>There are some nuances when running terraform for the first time, this is because the terraform state file doesn't exist nor the dynamoDB table. Therefore you need to bypass the lock (just the first time). </p> <p>This bypassing should only be done the first time, the lock is important for users/developers not to write the state file simultaneously.  <pre><code>terraform apply -lock=false\n</code></pre></p>"},{"location":"terraform_examples/02_PrivateServer/","title":"Example 02: VPN and server creation","text":"<p>In this example we are going to create a VPN and access it only from our current (public) IP address. This tutorial is inspired in the example provided by AWS in their official documentation. This example also takes advantage of the guidance provided by Ali Atakan Medium article.</p> <p>This implementation makes use of Security Group that acts as a firewall filtering the incoming and outgoing traffic from instances within the subnet within the VPC. There's  a second way of doing this (in example 3) that uses ACL's. </p>"},{"location":"terraform_examples/02_PrivateServer/#pre-requisites","title":"Pre-requisites","text":"<p>SSH keys: As part of this example a server in EC2 will be created, and access to it through SSH will be granted from your public IP.  The default key pair will be demo-e2-key and demo-e2-key.pub. Which will be stored under /root/.ssh/.</p> <p>You can use the following command to generate the key pair.</p> <pre><code>ssh-keygen -f /root/.ssh/demo-e2-key\n</code></pre> <p>Then you can use the following command to connect via SSH once the server is up:</p> <pre><code># ssh -i {private_key} {user}@{target_ip_address} \nssh -i /root/.ssh/demo-e2-key ubuntu@ec2-34-243-2-176.eu-west-1.compute.amazonaws.com\n</code></pre>"},{"location":"terraform_examples/02_PrivateServer/#results","title":"Results","text":"<p>@fig:findEC2</p> <p></p>"},{"location":"terraform_examples/02_PrivateServer/#frequent-questions","title":"Frequent Questions","text":"<p>How do you know your public IP address? As you may already know if your internet provider allocates you a dynamic IP address, your public IP address is going to change everytime you turn on and off your PC. Therefore the first thing to address in this document is how to retrieve your public IP address thing you need to do is to know what your. </p> <p>There are many ways to get your public IP address:</p> <ol> <li> <p>From Bash Script: As in this  StackExchange article, using the dig command working with OpenDNS. <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre></p> </li> <li> <p>From using your brower and going to http://ipv4.icanhazip.com. Note that if you are using a VPN this value may change.</p> </li> </ol> <p>In this example we do not care about the passing it as an input because the IP address is fetched using</p> <pre><code>data \"http\" \"myip\" {\nurl = \"http://ipv4.icanhazip.com\"\n}\n</code></pre>"}]}